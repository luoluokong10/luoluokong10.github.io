[{"categories":null,"content":"简介 作为著名的调包语言，python的包管理/依赖安装一直是一个糟心的事情，特别是现在系统级的包管理器均拒绝pip全局安装，使用虚拟环境是唯一之举。 在接触uv之前，我通常使用python自带的venv来创建、管理虚拟环境，有时候一些特殊的包需要借助conda来处理。和正常使用pip没啥区别，激活个环境就正常用。但是直到上个月我第一次使用uv，立刻就爱上这个工具。因为它实在是太快了！这个快不仅仅是下载速度，而是复现项目、环境配置的快，有种最开始使用docker的感觉。 这里仅记录一些基本的使用，只要用上一两次就能感受到这个工具的便捷与强大。 管理自己的项目 基本流程大概是： 创建项目文件夹、创建需要的虚拟环境、安装依赖、跑码。 uv init \u003cname-of-project\u003e cd \u003cname-of-project\u003e uv sync uv add numpy ... uv run main.py 如需指定python版本 uv python list # 查看已有的pythn解释器 uv python install 3.10 3.11 3.12 3.13 uv venv --python 3.12 # 记得把两个配置文件里的版本改对应 ... 设置镜像 vim pyproject.toml \u003e\u003e [[uv.tool.index]] \u003e\u003e url = \"https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple\" \u003e\u003e default = true 复现项目 # uv管理的项目 uv sync # 其他 uv pip sync requirements.txt Tips 无前缀执行 uv和通常的虚拟环境不太一样，执行前需要 uv run, 一些依赖二进制工具的项目可能因此无法启动, 只需要和一般的虚拟环境一样激活一下就行了。 ","date":"2025-04-30","objectID":"/2025/04/uv/:0:0","tags":["python","工具"],"title":"uv -- 最强Python项目管理工具","uri":"/2025/04/uv/"},{"categories":null,"content":"文字效果 粗体 斜体 删除线 加粗，斜体和删除线 块 高亮块 Secondary Success Info Warning Danger 链接 这是一个数字脚注 1 这是一个带标签的脚注 2 上标2 下标2 块 引用 嵌套 # 代码块 信息 描述 data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. 示例 横幅. 列表类 1 2 3 未完成 已完成 进行中 已取消 已计划 已重新计划 重要 问题 无序 有序 标记 这是一个数字脚注 ↩︎ 这是一个带标签的脚注 ↩︎ ","date":"2025-04-30","objectID":"/2025/04/hello/:0:0","tags":null,"title":"Hello Hugo","uri":"/2025/04/hello/"}]