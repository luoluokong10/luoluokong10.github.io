[{"categories":"绘图","content":"简介 Matlab 通常使用面向过程写法，也支持面向对象。绘图的过程非常切合面向对象的思想，在底层也是如此实现的。 尽管matlab支持函数式的绘图，但是这样的操作仅适合一些简单单图的处理。 图形对象层次结构 oop的绘图，就是摊开画布往上面添加元素，这些元素的包含关系即对象父子关系，具有层级结构。 通过引用将对象地址赋予变量，然后访问属性、方法来定制图像。 matlab的绘图层级，主要是 Figure - Axes - 各种函数对应的图形 以及它们上面的一些控件/文本/标记 直接使用函数绘图，仍然在后台构造对象(gcf, gca, gco)，只是未显式操作它们。 实例 在交互环境一行行执行即可看到对应的效果 fg = figure; # 创建figure实例 ax = axes('parent', fg); # 创建axes实例，指定父级 x = linspace(0, 1, 100); line = plot(x, sin(x)); 使用 get()查看所有所有属性和值; properties 可用属性; inspect 交互式属性查看器. line.LineStyle = ':'; ax.FontSize = 16; 关于属性的效果参考 mathwork 实战 封装散点图+线性拟合 局部放大 ","date":"2025-04-30","objectID":"/2025/04/matlab-draw/:0:0","tags":["Matlab"],"title":"Matlab 绘图","uri":"/2025/04/matlab-draw/"},{"categories":["vscode"],"content":"简介 Matlab 本身非常好用，但是补全是在是太逆天了，也没法很轻松的使用snippet和配置UI，借助第三方的编辑器可以一定程度上解决这些问题。 工具上，我考虑了 Jupyterlab 和 VSCode. 实操下来官方的 jupyter-matlab-proxy 在我这台 m2 上总是连接不上，开不了端口，但是单独使用matlab的工具又能正常开webui，看了几个issue也没啥帮助先搁置了。目前只能用 VSCode了。(neovim 和 emacs 好像也都可以，但是我看社区评价不咋滴，而且用这俩写matlab有点emmm) 原理都是通过 Python 调用 matlab 引擎，让 Python 执行 matlab 程序。其实上直接命令行也能执行，但是还要分情况考虑带不带jvm，不同系统还不一样，算了吧。 配置 需要 python3.9 - 3.11 matlab 2024b 最高支持到 3.11 VSCode 上 VSCode 安装插件包 Matlab Extension Pack 配置文件写入 { // \"MATLAB.showFeatureNotAvailableError\": false, \"files.associations\": {\"*.m\": \"matlab\"}, \"matlab.mlintpath\": \"/Applications/MATLAB_R2024b.app/bin/maca64/mlint\", \"matlab.linterEncoding\": \"utf8\", \"matlab.matlabpath\": \"/Applications/MATLAB_R2024b.app/bin/matlab\", \"matlab-interactive-terminal.pythonPath\": \"/opt/homebrew/bin/python3.10\", \"matlab-interactive-terminal.unicodeSwitch\": true, } 覆盖掉原本的 F5 快捷键 -\u003e …/Code/User/keybindings.json [ { \"key\": \"Cmd+r\", \"command\": \"matlab.runFile\", \"when\": \"editorTextFocus \u0026\u0026 !findInputFocussed \u0026\u0026 !matlab.isDebugging \u0026\u0026 !replaceInputFocussed \u0026\u0026 editorLangId == 'matlab' \u0026\u0026 resourceScheme != 'untitled'\" }, ] Matlab 上 which matlab # 记得加PATH cd ...\\extern\\engines\\python # Matalb 目录下 python setup.py install # python版本 3.9 - 3.11 需要 setuptools 可以弄个虚拟环境激活 ","date":"2025-04-30","objectID":"/2025/04/vscode-for-matlab/:0:0","tags":["matlab"],"title":"VSCode for Matlab","uri":"/2025/04/vscode-for-matlab/"},{"categories":null,"content":"简介 作为著名的调包语言，python的包管理/依赖安装一直是一个糟心的事情，特别是现在系统级的包管理器均拒绝pip全局安装，使用虚拟环境是唯一之举。 在接触uv之前，我通常使用python自带的venv来创建、管理虚拟环境，有时候一些特殊的包需要借助conda来处理。和正常使用pip没啥区别，激活个环境就正常用。但是直到上个月我第一次使用uv，立刻就爱上这个工具。因为它实在是太快了！这个快不仅仅是下载速度，而是复现项目、环境配置的快，有种最开始使用docker的感觉。 这里仅记录一些基本的使用，只要用上一两次就能感受到这个工具的便捷与强大。 管理自己的项目 基本流程大概是： 创建项目文件夹、创建需要的虚拟环境、安装依赖、跑码。 uv init \u003cname-of-project\u003e cd \u003cname-of-project\u003e uv sync uv add numpy ... uv run main.py 如需指定python版本 uv python list # 查看已有的pythn解释器 uv python install 3.10 3.11 3.12 3.13 uv venv --python 3.12 # 记得把两个配置文件里的版本改对应 ... 设置镜像 vim pyproject.toml \u003e\u003e [[uv.tool.index]] \u003e\u003e url = \"https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple\" \u003e\u003e default = true 复现项目 # uv管理的项目 uv sync # 其他 uv pip sync requirements.txt Tips 无前缀执行 uv和通常的虚拟环境不太一样，执行前需要 uv run, 一些依赖二进制工具的项目可能因此无法启动, 只需要和一般的虚拟环境一样激活一下就行了。 ","date":"2025-04-30","objectID":"/2025/04/uv/:0:0","tags":["python","工具"],"title":"uv -- 最强Python项目管理工具","uri":"/2025/04/uv/"},{"categories":null,"content":"文字效果 粗体 斜体 删除线 加粗，斜体和删除线 块 高亮块 Secondary Success Info Warning Danger 链接 这是一个数字脚注 1 这是一个带标签的脚注 2 上标2 下标2 块 引用 嵌套 # 代码块 信息 描述 data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. 示例 横幅. 列表类 1 2 3 未完成 已完成 进行中 已取消 已计划 已重新计划 重要 问题 无序 有序 标记 这是一个数字脚注 ↩︎ 这是一个带标签的脚注 ↩︎ ","date":"2025-04-30","objectID":"/2025/04/hello/:0:0","tags":null,"title":"Hello Hugo","uri":"/2025/04/hello/"}]