[{"categories":null,"content":" 度过今日，我已在这个世界行走24年。 24年，看起来遥不可及，但是我好像还没长大，就已经变老了。 至少目前来看，满是遗憾。 我不知道自己是否是个庸人，我一直很自负，我不是个蠢人。我也很自卑，因为我几乎一无所有。 我记得很久之前，我读到过一句话，“我深怕自己本非美玉，故而不敢加以刻苦琢磨，却又半信自己是块美玉，故又不肯庸庸碌碌，与瓦砾为伍。” 当时我以为是我的写照，现在发现只符合后半句。 因为不知从何时起，我失去了真正学习的能力。我不知道我是不是冷血的人，我爱好非常广泛，但是放弃任何一个又轻而易举；我对身边的朋友亲人非常用心，但是一旦分开后的我就不再联系。都说患得患失，在我这里任何东西好像放弃都很随意。我失去了真正学习的能力，失去了对任何事物持久的爱。 我觉得我学习速度是很快的，与之相伴的是我的遗忘速度。加上我喜欢什么都掺和一脚，然后浅尝辄止，造成了我什么都会一点，都不精通的尴尬。哪怕是用了很久的东西，我都没有想过深入了解一下。我用 Linux 5年了，从 kali 到 arch 换了个遍，但对于内核、模块一无所知，仅仅局限于折腾点小工具；我英语阅读一直很好，虽然单词量堪忧更不会拼写，猜意思却总是很顺利以至于英语从来没拖过我的后腿，我为这些沾沾自喜而从没有想过更进一步。我总是保持在一种比普通人强一点的水平，完全没有往更专业一点的发展；我很喜欢古诗词，小学就背诵过洛神赋，但是直到今天最后一点我还是卡壳，永远都是对前面非常熟悉，却没有下点心完整的获得……我有过太多的机会，却总是向它们轻易的挥手。 所以我的人生充满了遗憾，我看似什么都会，但是一无所有，空洞的走完24年。 我不太喜欢反思自己，因为这会让我的自负完全转换为自卑，我处在高不成低不就的尴尬，越是这样我越害怕看自己的影子。但是我已经开始变老了，我没有更多去挥霍了。我并非不敢加以刻苦琢磨，而是从来都没有过这个打算，我不是不喜欢某些东西，而是浅尝辄止早已成为习惯。又因为不肯庸庸碌碌，所以我广泛培养兴趣，涉猎广泛却又草草结束。于人于事，无不如此。 现在我鼓起勇气，看向这游戏了24年的影子，我忽然想起来我姐姐，如果当初我没有出生，她一定会活得无比热烈，不必东躲西藏怀病离去。我没有背负起你的生命，你总是那么地聪明，我却搞糟了一切…… 好在，只是1/4. ","date":"2025-05-04","objectID":"/2025/05/24-years/:0:0","tags":null,"title":"我的 24 年","uri":"/2025/05/24-years/"},{"categories":null,"content":" 标准的 Navier-Stokes 方程 $$ \\partial_t u + (u\\cdot\\nabla) u - \\Delta u + \\nabla p = 0 $$ 简介 N-S 方程有两个未知量 速度场 $u(x,t)$ 和 标量压力场 $p(x,t)$, 给定初速度 $u_0(x,t)$ 来考虑在系统作用下 速度和压力随时空的变化(解/方程)。方程中，时间导数 $\\partial_t u$ 和对流项 $(u\\cdot\\nabla) u$ 代表了物质导数，即流体关于时间变化下 物理量的全导数变化率，可以简单理解为加速度。加速度的产生来自应力，这里表现为压力差 $\\nabla p$ 1 和 粘性摩擦 $-\\Delta u$. 其中粘性项是使得方程解平稳、收敛的核心(可以理解为只有他是负的)。 因此有关粘性(摩擦)的强度(抽象为拉普拉斯算子的阶数)的临界就是非常重要的问题，强度越大越容易收敛；标准的千禧年问题是 阶数=1时只要初值满足一定条件下，存在全局唯一的光滑解且能量有界。研究更低阶是为了应用更多工具、更深刻的理解粘性项如何控制系统的。 关于流体所处的环境(只考虑三维)，非物理两个：全空间 $\\mathbb{R}^3$ 和环面 $\\mathbb{T}^3$；物理上：某个区域 $\\Omega \\subset \\mathbb{R}^3$。 分别带有特殊的约束条件：无穷处收敛，零均值，Dirichlet 边界条件。 其中周期区域(环面)性质最好，可用的工具也就相对较多，是我们目前主要考虑的情况。 主流方法 目前主流的方法有很多，也取得了一定的成果，这里只从我涉及到的来介绍。 能量估计 能量估计是一种粗糙的方法，通过乘积积分来构造能量函数，再进行放缩、分析给出能量的有限性。给出的是整体的稳定性，不擅长刻解的局部连续性。 最基本的 $L^2$ 估计，乘上解本身再积分，描述了动能的有界。动能有界只能保证速度长本身。 在此之上 $H^1$ 估计，乘上耗散项再积分，加强对梯度项的约束，可以控制非线性项；可以定义散度、涡量等导数，有一定光滑性，局部结构可测；可以引入紧性，传递极限来得到收敛解。 此时对解的连续性几乎没有要求，只是在积分意义下成立。可以得到稳定的 Leray 弱解框架。 更高的 $H^2$ 估计，需估计涉及 $\\nabla u$、$\\Delta u$，甚至对时间导数 $\\partial_t u$ 也要有控制 … 不断提升正则性，可以引入更多的工具，嵌入到更好的空间去得到连续性 … 调和分析 数值方法 PDE的数值方法一般都是逼近，在流体这块有专门的 CFD… 更精准地说，是流体压强除以流体密度后的商，对于不可压缩的匀质流体，密度为一定值。 ↩︎ ","date":"2025-05-02","objectID":"/2025/05/n-s/:0:0","tags":null,"title":"Navier-Stokes 方程 -- 概述","uri":"/2025/05/n-s/"},{"categories":"绘图","content":" 参考 R语言教程-李东风 R for Data Science 简介 ggplot2包是R的一个作图用的扩展包， 它实现了“图形的语法”， 将一个作图任务分解为若干个子任务， 只要完成各个子任务就可以完成作图。 在作常用的图形时， 只需要两个步骤： 首先将图形所展现的数据输入到ggplot()函数中， 然后调用某个geom_xxx()函数， 指定图形类型，如散点图、曲线图、盒形图等。 本质上，ggplot2 是对 R 语言绘图能力的一次高级封装。它引入了图层语法，以数据为核心，通过映射（aesthetic mapping）、几何对象（geoms）、统计变换（stats）等组件构建图像。相比传统绘图方式中对“画布元素”逐个添加的思路，ggplot2 更注重语义表达，使绘图过程更具逻辑性和可读性。 与 MATLAB 的绘图系统相比，ggplot2 更接近“数据可视化”范式而非“函数图像绘制”范式。MATLAB 更强调通过函数表达式控制图形细节，适合工程、信号处理等领域的数学函数可视化；而 ggplot2 更关注数据结构与变量间关系的呈现，更适用于统计建模、数据分析、科研可视化等场景。因此，ggplot2 与数据的耦合度更高。 作图流程： 准备数据，data frame，长表(每行是一个观测对象，每列是一种属性); 数据输入到ggplot()函数中, 指定参与作图的每个变量分别映射到哪些图形特性， 比如映射为x坐标、y坐标、颜色、形状等; 选择一个合适的图形类型， 函数名以geom_开头， 如geom_point()表示散点图。 图形类型简称为geom。 将ggplot()部分与geom_xxx()部分用加号连接。 到此已经可以作图，下面的步骤是进一步的细化设定; 设定适当的坐标系统， 如coord_cartesian(), scale_x_log10()等。 仍用加号连接; 设定标题和图例位置等，如labs()。 仍用加号连接。 模版 p \u003c- ggplot(data=\u003c输入数据框\u003e, mapping=aes(\u003c维度\u003e=\u003c变量名\u003e, \u003c维度\u003e=\u003c变量名\u003e, \u003c...\u003e)) p + geom_\u003c图形类型\u003e(\u003c...\u003e) + scale_\u003c映射\u003e_\u003c类型\u003e(\u003c...\u003e) + coord_\u003c类型\u003e(\u003c...\u003e) + labs(\u003c...\u003e) 实例 library(tidyverse) # 加载数据集和ggplot2 mpg # 美国环境保护署对 38 种汽车型号的观察结果 p \u003c- ggplot(data = mpg) p + geom_point(mapping = aes(x= displ, y = hwy, color = class)) ","date":"2025-05-01","objectID":"/2025/05/ggplot2-draw/:0:0","tags":["r"],"title":"ggplot2 绘图","uri":"/2025/05/ggplot2-draw/"},{"categories":"绘图","content":"简介 Matlab 通常使用面向过程写法，也支持面向对象。绘图的过程非常切合面向对象的思想，在底层也是如此实现的。 尽管matlab支持函数式的绘图，但是这样的操作仅适合一些简单单图的处理。 图形对象层次结构 oop的绘图，就是摊开画布往上面添加元素，这些元素的包含关系即对象父子关系，具有层级结构。 通过引用将对象地址赋予变量，然后访问属性、方法来定制图像。 matlab的绘图层级，主要是 Figure - Axes - 各种函数对应的图形 以及它们上面的一些控件/文本/标记 直接使用函数绘图，仍然在后台构造对象(gcf, gca, gco)，只是未显式操作它们。 实例 在交互环境一行行执行即可看到对应的效果 fg = figure; # 创建figure实例 ax = axes('parent', fg); # 创建axes实例，指定父级 x = linspace(0, 1, 100); line = plot(x, sin(x)); 使用 get()查看所有所有属性和值; properties 可用属性; inspect 交互式属性查看器. line.LineStyle = ':'; ax.FontSize = 16; 关于属性的效果参考 mathwork 实战 封装散点图+线性拟合 局部放大 ","date":"2025-04-30","objectID":"/2025/04/matlab-draw/:0:0","tags":["Matlab"],"title":"Matlab 绘图","uri":"/2025/04/matlab-draw/"},{"categories":["vscode"],"content":"简介 Matlab 本身非常好用，但是补全是在是太逆天了，也没法很轻松的使用snippet和配置UI，借助第三方的编辑器可以一定程度上解决这些问题。 工具上，我考虑了 Jupyterlab 和 VSCode. 实操下来官方的 jupyter-matlab-proxy 在我这台 m2 上总是连接不上，开不了端口，但是单独使用matlab的工具又能正常开webui，看了几个issue也没啥帮助先搁置了。目前只能用 VSCode了。(neovim 和 emacs 好像也都可以，但是我看社区评价不咋滴，而且用这俩写matlab有点emmm) 原理都是通过 Python 调用 matlab 引擎，让 Python 执行 matlab 程序。其实上直接命令行也能执行，但是还要分情况考虑带不带jvm，不同系统还不一样，算了吧。 配置 需要 python3.9 - 3.11 matlab 2024b 最高支持到 3.11 VSCode 上 VSCode 安装插件包 Matlab Extension Pack 配置文件写入 { // \"MATLAB.showFeatureNotAvailableError\": false, \"files.associations\": {\"*.m\": \"matlab\"}, \"matlab.mlintpath\": \"/Applications/MATLAB_R2024b.app/bin/maca64/mlint\", \"matlab.linterEncoding\": \"utf8\", \"matlab.matlabpath\": \"/Applications/MATLAB_R2024b.app/bin/matlab\", \"matlab-interactive-terminal.pythonPath\": \"/opt/homebrew/bin/python3.10\", \"matlab-interactive-terminal.unicodeSwitch\": true, } 覆盖掉原本的 F5 快捷键 -\u003e …/Code/User/keybindings.json [ { \"key\": \"Cmd+r\", \"command\": \"matlab.runFile\", \"when\": \"editorTextFocus \u0026\u0026 !findInputFocussed \u0026\u0026 !matlab.isDebugging \u0026\u0026 !replaceInputFocussed \u0026\u0026 editorLangId == 'matlab' \u0026\u0026 resourceScheme != 'untitled'\" }, ] Matlab 上 which matlab # 记得加PATH cd ...\\extern\\engines\\python # Matalb 目录下 python setup.py install # python版本 3.9 - 3.11 需要 setuptools 可以弄个虚拟环境激活 ","date":"2025-04-30","objectID":"/2025/04/vscode-for-matlab/:0:0","tags":["matlab"],"title":"VSCode for Matlab","uri":"/2025/04/vscode-for-matlab/"},{"categories":null,"content":" astral-sh/uv Public An extremely fast Python package and project manager, written in Rust. Rust 52.5k 1.5k 简介 作为著名的调包语言，python的包管理/依赖安装一直是一个糟心的事情，特别是现在系统级的包管理器均拒绝pip全局安装，使用虚拟环境是唯一之举。 在接触uv之前，我通常使用python自带的venv来创建、管理虚拟环境，有时候一些特殊的包需要借助conda来处理。和正常使用pip没啥区别，激活个环境就正常用。但是直到上个月我第一次使用uv，立刻就爱上这个工具。因为它实在是太快了！这个快不仅仅是下载速度，而是复现项目、环境配置的快，有种最开始使用docker的感觉。 这里仅记录一些基本的使用，只要用上一两次就能感受到这个工具的便捷与强大。 管理自己的项目 基本流程大概是： 创建项目文件夹、创建需要的虚拟环境、安装依赖、跑码。 uv init \u003cname-of-project\u003e cd \u003cname-of-project\u003e uv sync uv add numpy ... uv run main.py 如需指定python版本 uv python list # 查看已有的pythn解释器 uv python install 3.10 3.11 3.12 3.13 uv venv --python 3.12 # 记得把两个配置文件里的版本改对应 ... 设置镜像 vim pyproject.toml \u003e\u003e [[uv.tool.index]] \u003e\u003e url = \"https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple\" \u003e\u003e default = true 复现项目 # uv管理的项目 uv sync # 其他 uv pip sync requirements.txt Tips 无前缀执行 uv和通常的虚拟环境不太一样，执行前需要 uv run, 一些依赖二进制工具的项目可能因此无法启动, 只需要和一般的虚拟环境一样激活一下就行了。 ","date":"2025-04-30","objectID":"/2025/04/uv/:0:0","tags":["python","工具"],"title":"uv -- 最强Python项目管理工具","uri":"/2025/04/uv/"},{"categories":null,"content":"文字效果 粗体 斜体 删除线 加粗，斜体和删除线 块 高亮块 Secondary Success Info Warning Danger 链接 这是一个数字脚注 1 这是一个带标签的脚注 2 上标2 下标2 块 引用 嵌套 # 代码块 信息 描述 data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. 示例 横幅. 列表类 1 2 3 未完成 已完成 进行中 已取消 已计划 已重新计划 重要 问题 无序 有序 标记 这是一个数字脚注 ↩︎ 这是一个带标签的脚注 ↩︎ ","date":"2025-04-30","objectID":"/2025/04/hello/:0:0","tags":null,"title":"Hello Hugo","uri":"/2025/04/hello/"}]