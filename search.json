[{"categories":null,"content":"引 问题 很久之前我就感觉到自己失去了真正学习的能力，这种感觉非常强烈，从高中一直延续到现在。每当我下决心要好好学习某个东西，总是很难坚持下去，而且刚开始的那一部分也没有学到脑子里去。 就这样循环往复，我越来越感到自己的无知，看似什么都会一点，但是都是浮于表面。 现在反思，得出的结论是，我的学习方法出了大问题。一直以来我只会面向考试的学习，表现就是什么都想抓住，很快就会陷入繁杂的细节里去，然后失去激情或是很快遗忘。至于之前可以有效，那仅仅是因为有老师的协助以及大量时间成本的堆叠，使得我能慢慢地掌握那些实际上意义不大的东西。 当学习成为自己一个人的事情且没有超长的学校教育流程，这套体系就崩塌了。 本质上是我没搞清楚，什么是需要真正学习的东西，什么只是一些写在手册上随时查询的东西。学习的目的是学会借助一切可以借助的去解决问题，大部分情况你只需要知道有什么可以借助，以及如何在使用中借助他们而不是把所有细节都记下来。 学习，只需要学最本质的那些，需要真正理解的部分。其他的只不过是实践中自然而然熟悉的东西，不应该占据学习的主要部分。 如何解决 虽然说起来很容易，但是如何分辨最核心的部分并不是容易的事情，特别是对本就不清楚目标的新手。 我认为，一方面是通过自己的感受来判断，这是最基本的，也是能力的体现。 1. 理解本质, 抛弃细节 花一秒钟就看透事物本质的人，和花一辈子都看不清的人，注定是截然不同的命运。 比如，我学过很多次正则表达式。两年前我用纯正则爬了JAVBUS，把每个卡片的信息包括bt链接塞进数据库，非常成功，几百MB的数据库看着非常有成就感，那时候我觉得我完全掌握正则表达式了。但是实际是，很快我就忘记了。在我需要它的时候，我不得不再次花时间去学习，我之前的经验对我再一次学习没有起到特别大的帮助，依旧很耗时间。 而我这一次学习完，我感觉到的是，我依旧没有真正掌握它，因为它只是作为记忆短期的存在于我的脑子中。来看看我是如何学习的：我跟着 正则表达式指南，依次的敲击它提供的代码，根据他的指引学习一个个元字符，然后又借助 Stackoverflow 学习递归匹配，成功实现了我的需求。 这看起来是一次很成功的学习，不是吗？我选择的教程非常棒，我在正确的平台顺利的得到了我需要的答案，我成功的完成了自己的需求。但是并不是，这只是一次成功的实践而不是学习。我抱着学习的态度，花费了不小的精力，并没有真正的让这部分知识成为我的长期能力，下一次遇到问题我可能还需要再学习一遍，尽管我可能会残存一些记忆，但是他们并不清晰，不能对我再次学习提供质的帮助。 因为我在学习之前，没有思考。我没有去思考正则表达式最核心的部分，最需要理解的部分 – 字符集合(或是其他名称，这并不重要)。我选择记忆了哪些最无聊的部分，\\s \\d 等等，这些人为规定的无意义的字符就是让我失败的原因。因为它们对理解本质毫无意义，它们本应该是在应用中随时查阅的东西，随着经验而变得熟悉而不是在学习的时候去消耗精力记忆的部分。你只需要知道有这个工具，它是做什么的就行，不需要把工具的说明书背下来。 以上就是我认为我学习正则表达式失败的原因，让不重要的东西干扰了我对本质的理解。我的理解本没有错，但是被太多没用的东西遮掩住了，让它们随时间白白遗忘。 2. 赛博老师 很多情况下，一个复杂事物的核心只有有经验的人才能知晓，这对于我们来说是难以接触到的。 不过好在有AI的存在，我们可以低成本的得到一位耐心的全面的赛博老师。我们可以参考性的去询问他们，所学习的对象最重要的部分，哪些是可以暂时抛弃的细节。 当然这只是一种参考，但是好在易于获得。我还在总结这方面的经验，就暂时没有例子。 如何学习 第一原则 在学习某个东西之前，一定要确认哪些是最核心的部分，需要理解的部分才是我们需要的。选择好方向至关重要，决定了我们接下来的学习是否轻松、能否长期有效。 这是目前我认为最重要的原则，如果做不到干脆就不去学习，浪费时间。 不过这个原则太过笼统，而且覆盖范围有限，对于很多纯靠记忆的东西不那么贴切，作为一种提醒更好，三思而后学。 费曼学习法 以讲代学，语言越简单越好 实际上我之前并没有了解过费曼学习法，看了一下直中我之前犯下的错误：注重无聊的细节而不是本质。 用简单的语言去描述想法，获得更本质的认识而不是重复人为归纳的复杂的名词。然后有条理的总结再传授给别人，以讲促进理解，以讲代学。 实践 重新学习Python 我对python的认知并不充足，借助此次机会来实践一下学习方法，重新学习一遍。 首先，明确目前需要学习什么。我想要深入的过一遍核心概念，从底层运行机制到模块管理。 对于python，最重要的莫过于类型/对象机制，如何理解这种机制在通用的编程语言知识(数据结构、控制、函数、类、模块)的应用是至关重要的，最优先关注的。 可以暂时舍弃的，是具体的几个数据结构的各种方法、魔法函数以及类型实现的细节。 大致分为三块 运行机制与表达能力 - 控制结构与数据结构 - 抽象与封装 ","date":"2025-05-09","objectID":"/learning/content/:0:0","tags":null,"title":"概述 -- 如何学习","uri":"/learning/content/"},{"categories":null,"content":" 标准的 Navier-Stokes 方程 $$ \\partial_t u + (u\\cdot\\nabla) u - \\Delta u + \\nabla p = 0 $$ 简介 N-S 方程有两个未知量 速度场 $u(x,t)$ 和 标量压力场 $p(x,t)$, 给定初速度 $u_0(x,t)$ 来考虑在系统作用下 速度和压力随时空的变化(解/方程)。方程中，时间导数 $\\partial_t u$ 和对流项 $(u\\cdot\\nabla) u$ 代表了物质导数，即流体关于时间变化下 物理量的全导数变化率，可以简单理解为加速度。加速度的产生来自应力，这里表现为压力差 $\\nabla p$ 1 和 粘性摩擦 $-\\Delta u$. 其中粘性项是使得方程解平稳、收敛的核心(可以理解为只有他是负的)。 因此有关粘性(摩擦)的强度(抽象为拉普拉斯算子的阶数)的临界就是非常重要的问题，强度越大越容易收敛；标准的千禧年问题是 阶数=1时只要初值满足一定条件下，存在全局唯一的光滑解且能量有界。研究更低阶是为了应用更多工具、更深刻的理解粘性项如何控制系统的。 关于流体所处的环境(只考虑三维)，非物理两个：全空间 $\\mathbb{R}^3$ 和环面 $\\mathbb{T}^3$；物理上：某个区域 $\\Omega \\subset \\mathbb{R}^3$。 分别带有特殊的约束条件：无穷处收敛，零均值，Dirichlet 边界条件。 其中周期区域(环面)性质最好，可用的工具也就相对较多，是我们目前主要考虑的情况。 主流方法 目前主流的方法有很多，也取得了一定的成果，这里只从我涉及到的来介绍。 能量估计 能量估计是一种粗糙的方法，通过乘积积分来构造能量函数，再进行放缩、分析给出能量的有限性。给出的是整体的稳定性，不擅长刻解的局部连续性。 最基本的 $L^2$ 估计，乘上解本身再积分，描述了动能的有界。动能有界只能保证速度长本身。 在此之上 $H^1$ 估计，乘上耗散项再积分，加强对梯度项的约束，可以控制非线性项；可以定义散度、涡量等导数，有一定光滑性，局部结构可测；可以引入紧性，传递极限来得到收敛解。 此时对解的连续性几乎没有要求，只是在积分意义下成立。可以得到稳定的 Leray 弱解框架。 更高的 $H^2$ 估计，需估计涉及 $\\nabla u$、$\\Delta u$，甚至对时间导数 $\\partial_t u$ 也要有控制 … 不断提升正则性，可以引入更多的工具，嵌入到更好的空间去得到连续性 … 调和分析 数值方法 PDE的数值方法一般都是逼近，在流体这块有专门的 CFD… 更精准地说，是流体压强除以流体密度后的商，对于不可压缩的匀质流体，密度为一定值。 ↩︎ ","date":"2025-05-02","objectID":"/2025/05/n-s/:0:0","tags":null,"title":"Navier-Stokes 方程 -- 概述","uri":"/2025/05/n-s/"},{"categories":"绘图","content":" 参考 R语言教程-李东风 R for Data Science 简介 ggplot2包是R的一个作图用的扩展包， 它实现了“图形的语法”， 将一个作图任务分解为若干个子任务， 只要完成各个子任务就可以完成作图。 在作常用的图形时， 只需要两个步骤： 首先将图形所展现的数据输入到ggplot()函数中， 然后调用某个geom_xxx()函数， 指定图形类型，如散点图、曲线图、盒形图等。 本质上，ggplot2 是对 R 语言绘图能力的一次高级封装。它引入了图层语法，以数据为核心，通过映射（aesthetic mapping）、几何对象（geoms）、统计变换（stats）等组件构建图像。相比传统绘图方式中对“画布元素”逐个添加的思路，ggplot2 更注重语义表达，使绘图过程更具逻辑性和可读性。 与 MATLAB 的绘图系统相比，ggplot2 更接近“数据可视化”范式而非“函数图像绘制”范式。MATLAB 更强调通过函数表达式控制图形细节，适合工程、信号处理等领域的数学函数可视化；而 ggplot2 更关注数据结构与变量间关系的呈现，更适用于统计建模、数据分析、科研可视化等场景。因此，ggplot2 与数据的耦合度更高。 作图流程： 准备数据，data frame，长表(每行是一个观测对象，每列是一种属性); 数据输入到ggplot()函数中, 指定参与作图的每个变量分别映射到哪些图形特性， 比如映射为x坐标、y坐标、颜色、形状等; 选择一个合适的图形类型， 函数名以geom_开头， 如geom_point()表示散点图。 图形类型简称为geom。 将ggplot()部分与geom_xxx()部分用加号连接。 到此已经可以作图，下面的步骤是进一步的细化设定; 设定适当的坐标系统， 如coord_cartesian(), scale_x_log10()等。 仍用加号连接; 设定标题和图例位置等，如labs()。 仍用加号连接。 模版 p \u003c- ggplot(data=\u003c输入数据框\u003e, mapping=aes(\u003c维度\u003e=\u003c变量名\u003e, \u003c维度\u003e=\u003c变量名\u003e, \u003c...\u003e)) p + geom_\u003c图形类型\u003e(\u003c...\u003e) + scale_\u003c映射\u003e_\u003c类型\u003e(\u003c...\u003e) + coord_\u003c类型\u003e(\u003c...\u003e) + labs(\u003c...\u003e) 实例 library(tidyverse) # 加载数据集和ggplot2 mpg # 美国环境保护署对 38 种汽车型号的观察结果 p \u003c- ggplot(data = mpg) p + geom_point(mapping = aes(x= displ, y = hwy, color = class)) ","date":"2025-05-01","objectID":"/2025/05/ggplot2-draw/:0:0","tags":["r"],"title":"ggplot2 绘图","uri":"/2025/05/ggplot2-draw/"},{"categories":"绘图","content":"简介 Matlab 通常使用面向过程写法，也支持面向对象。绘图的过程非常切合面向对象的思想，在底层也是如此实现的。 尽管matlab支持函数式的绘图，但是这样的操作仅适合一些简单单图的处理。 图形对象层次结构 oop的绘图，就是摊开画布往上面添加元素，这些元素的包含关系即对象父子关系，具有层级结构。 通过引用将对象地址赋予变量，然后访问属性、方法来定制图像。 matlab的绘图层级，主要是 Figure - Axes - 各种函数对应的图形 以及它们上面的一些控件/文本/标记 直接使用函数绘图，仍然在后台构造对象(gcf, gca, gco)，只是未显式操作它们。 实例 在交互环境一行行执行即可看到对应的效果 fg = figure; # 创建figure实例 ax = axes('parent', fg); # 创建axes实例，指定父级 x = linspace(0, 1, 100); line = plot(x, sin(x)); 使用 get()查看所有所有属性和值; properties 可用属性; inspect 交互式属性查看器. line.LineStyle = ':'; ax.FontSize = 16; 关于属性的效果参考 mathwork 实战 封装散点图+线性拟合 局部放大 ","date":"2025-04-30","objectID":"/2025/04/matlab-draw/:0:0","tags":["Matlab"],"title":"Matlab 绘图","uri":"/2025/04/matlab-draw/"},{"categories":["vscode"],"content":"简介 Matlab 本身非常好用，但是补全是在是太逆天了，也没法很轻松的使用snippet和配置UI，借助第三方的编辑器可以一定程度上解决这些问题。 工具上，我考虑了 Jupyterlab 和 VSCode. 实操下来官方的 jupyter-matlab-proxy 在我这台 m2 上总是连接不上，开不了端口，但是单独使用matlab的工具又能正常开webui，看了几个issue也没啥帮助先搁置了。目前只能用 VSCode了。(neovim 和 emacs 好像也都可以，但是我看社区评价不咋滴，而且用这俩写matlab有点emmm) 原理都是通过 Python 调用 matlab 引擎，让 Python 执行 matlab 程序。其实上直接命令行也能执行，但是还要分情况考虑带不带jvm，不同系统还不一样，算了吧。 配置 需要 python3.9 - 3.11 matlab 2024b 最高支持到 3.11 VSCode 上 VSCode 安装插件包 Matlab Extension Pack 配置文件写入 { // \"MATLAB.showFeatureNotAvailableError\": false, \"files.associations\": {\"*.m\": \"matlab\"}, \"matlab.mlintpath\": \"/Applications/MATLAB_R2024b.app/bin/maca64/mlint\", \"matlab.linterEncoding\": \"utf8\", \"matlab.matlabpath\": \"/Applications/MATLAB_R2024b.app/bin/matlab\", \"matlab-interactive-terminal.pythonPath\": \"/opt/homebrew/bin/python3.10\", \"matlab-interactive-terminal.unicodeSwitch\": true, } 覆盖掉原本的 F5 快捷键 -\u003e …/Code/User/keybindings.json [ { \"key\": \"Cmd+r\", \"command\": \"matlab.runFile\", \"when\": \"editorTextFocus \u0026\u0026 !findInputFocussed \u0026\u0026 !matlab.isDebugging \u0026\u0026 !replaceInputFocussed \u0026\u0026 editorLangId == 'matlab' \u0026\u0026 resourceScheme != 'untitled'\" }, ] Matlab 上 which matlab # 记得加PATH cd ...\\extern\\engines\\python # Matalb 目录下 python setup.py install # python版本 3.9 - 3.11 需要 setuptools 可以弄个虚拟环境激活 ","date":"2025-04-30","objectID":"/2025/04/vscode-for-matlab/:0:0","tags":["matlab"],"title":"VSCode for Matlab","uri":"/2025/04/vscode-for-matlab/"},{"categories":null,"content":" astral-sh/uv Public An extremely fast Python package and project manager, written in Rust. Rust 53.1k 1.5k 简介 作为著名的调包语言，python的包管理/依赖安装一直是一个糟心的事情，特别是现在系统级的包管理器均拒绝pip全局安装，使用虚拟环境是唯一之举。 在接触uv之前，我通常使用python自带的venv来创建、管理虚拟环境，有时候一些特殊的包需要借助conda来处理。和正常使用pip没啥区别，激活个环境就正常用。但是直到上个月我第一次使用uv，立刻就爱上这个工具。因为它实在是太快了！这个快不仅仅是下载速度，而是复现项目、环境配置的快，有种最开始使用docker的感觉。 这里仅记录一些基本的使用，只要用上一两次就能感受到这个工具的便捷与强大。 管理自己的项目 基本流程大概是： 创建项目文件夹、创建需要的虚拟环境、安装依赖、跑码。 uv init \u003cname-of-project\u003e cd \u003cname-of-project\u003e uv sync uv add numpy ... uv run main.py 如需指定python版本 uv python list # 查看已有的pythn解释器 uv python install 3.10 3.11 3.12 3.13 uv venv --python 3.12 # 记得把两个配置文件里的版本改对应 ... 设置镜像 vim pyproject.toml \u003e\u003e [[uv.tool.index]] \u003e\u003e url = \"https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple\" \u003e\u003e default = true 复现项目 # uv管理的项目 uv sync # 其他 uv pip sync requirements.txt Tips 无前缀执行 uv和通常的虚拟环境不太一样，执行前需要 uv run, 一些依赖二进制工具的项目可能因此无法启动, 只需要和一般的虚拟环境一样激活一下就行了。 ","date":"2025-04-30","objectID":"/2025/04/uv/:0:0","tags":["python","工具"],"title":"uv -- 最强Python项目管理工具","uri":"/2025/04/uv/"},{"categories":null,"content":"文字效果 粗体 斜体 删除线 加粗，斜体和删除线 块 高亮块 Secondary Success Info Warning Danger 链接 这是一个数字脚注 1 这是一个带标签的脚注 2 上标2 下标2 块 引用 嵌套 # 代码块 信息 描述 data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. 示例 横幅. 列表类 1 2 3 未完成 已完成 进行中 已取消 已计划 已重新计划 重要 问题 无序 有序 标记 数学公式 \\begin{CD} A @\u003ea\u003e\u003e B \\\\ @VbVV @AAcA \\\\ C @= D \\end{CD} 这是一个数字脚注 ↩︎ 这是一个带标签的脚注 ↩︎ ","date":"2025-04-30","objectID":"/2025/04/hello/:0:0","tags":null,"title":"Hello Hugo","uri":"/2025/04/hello/"}]